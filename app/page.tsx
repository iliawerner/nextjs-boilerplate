'use client'; // <-- –≠—Ç–æ –≤–∞–∂–Ω–æ! –ì–æ–≤–æ—Ä–∏—Ç Next.js, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π.

import React, { useState, useEffect } from 'react';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞
interface Contact {
  id: string;
  name: string;
  role: string;
  status: 'New' | 'Contacted' | 'Replied' | 'Archived';
  profileText?: string;
  analysis?: string;
  generatedMessage?: string;
  conversation?: { author: 'user' | 'client'; text: string }[];
}

// –ù–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
const initialContacts: Contact[] = [
  { id: '1', name: '–ò–ª—å—è –í–µ—Ä–Ω–µ—Ä', role: 'Co-founder at SCULPT AI', status: 'Replied' },
  { id: '2', name: '–ï–≤–≥–µ–Ω–∏–π –°–º–∏—Ä–Ω–æ–≤', role: 'Head of Product at Awesome Inc.', status: 'Contacted' },
  { id: '3', name: '–î–∞—Ä—å—è –ö–∞–º—ã—à–∏–Ω–∞', role: 'Lead PM at Tech Innovations', status: 'New' },
];

export default function HomePage() {
  // --- –°–û–°–¢–û–Ø–ù–ò–ï (State) ---
  // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
  const [contacts, setContacts] = useState<Contact[]>([]);
  // ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const [selectedContactId, setSelectedContactId] = useState<string | null>(null);
  // –¢–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
  const [searchTerm, setSearchTerm] = useState('');
  
  // --- –õ–û–ì–ò–ö–ê ---

  // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –ø–∞–º—è—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  useEffect(() => {
    try {
      const savedContacts = localStorage.getItem('sculpt_contacts');
      if (savedContacts) {
        setContacts(JSON.parse(savedContacts));
        setSelectedContactId(JSON.parse(savedContacts)[0]?.id || null);
      } else {
        // –ï—Å–ª–∏ –≤ –ø–∞–º—è—Ç–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        setContacts(initialContacts);
        setSelectedContactId(initialContacts[0]?.id || null);
      }
    } catch (error) {
      console.error("Failed to load contacts from local storage", error);
      setContacts(initialContacts);
      setSelectedContactId(initialContacts[0]?.id || null);
    }
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ [] –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  // –ö–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –º–µ–Ω—è–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–∞–º—è—Ç—å –±—Ä–∞—É–∑–µ—Ä–∞
  useEffect(() => {
    if(contacts.length > 0) {
      localStorage.setItem('sculpt_contacts', JSON.stringify(contacts));
    }
  }, [contacts]); // –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ `contacts` –∏–∑–º–µ–Ω—è–µ—Ç—Å—è

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const handleAddContact = () => {
    const name = prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:');
    if (name) {
      const newContact: Contact = {
        id: new Date().toISOString(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        name: name,
        role: '–î–æ–ª–∂–Ω–æ—Å—Ç—å/–ö–æ–º–ø–∞–Ω–∏—è',
        status: 'New',
      };
      const updatedContacts = [newContact, ...contacts];
      setContacts(updatedContacts);
      setSelectedContactId(newContact.id); // –°—Ä–∞–∑—É –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
  const handleDeleteContact = (idToDelete: string) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç?')) {
        const updatedContacts = contacts.filter(c => c.id !== idToDelete);
        setContacts(updatedContacts);
        // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ
        if(selectedContactId === idToDelete) {
            setSelectedContactId(updatedContacts[0]?.id || null);
        }
    }
  }

  // –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
  const handleStatusChange = (contactId: string, newStatus: Contact['status']) => {
      setContacts(contacts.map(c => c.id === contactId ? {...c, status: newStatus} : c));
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–∏—Å–∫–µ
  const filteredContacts = contacts.filter(contact =>
    contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    contact.role.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
  const selectedContact = contacts.find(c => c.id === selectedContactId);

  // --- –ò–ù–¢–ï–†–§–ï–ô–° (JSX) ---
  return (
    <div className="container">
      {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ */}
      <aside className="sidebar">
        <div className="sidebar-header">
          <h1 className="title">SCULPT Outreach</h1>
          <input
            type="text"
            placeholder="üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞..."
            className="search-input"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        <div className="contact-list">
          {filteredContacts.map((contact) => (
            <div
              key={contact.id}
              className={`contact-item ${contact.id === selectedContactId ? 'active' : ''}`}
              onClick={() => setSelectedContactId(contact.id)}
            >
              <div className="contact-info">
                <h3>{contact.name}</h3>
                <span className={`status ${contact.status.toLowerCase()}`}>{contact.status}</span>
              </div>
              <p>{contact.role}</p>
            </div>
          ))}
        </div>
        <div className="sidebar-footer">
          <button className="btn btn-primary" onClick={handleAddContact}>
            + –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
          </button>
        </div>
      </aside>

      {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: –†–∞–±–æ—á–∞—è –æ–±–ª–∞—Å—Ç—å */}
      <main className="main-content">
        {selectedContact ? (
          <>
            <div className="card">
                <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center'}}>
                    <h2 className="card-title">–ü—Ä–æ—Ñ–∏–ª—å: {selectedContact.name}</h2>
                    <div>
                        <select 
                            value={selectedContact.status} 
                            onChange={(e) => handleStatusChange(selectedContact.id, e.target.value as Contact['status'])}
                            className="status-select"
                        >
                            <option value="New">New</option>
                            <option value="Contacted">Contacted</option>
                            <option value="Replied">Replied</option>
                            <option value="Archived">Archived</option>
                        </select>
                        <button onClick={() => handleDeleteContact(selectedContact.id)} className="delete-btn">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
                <textarea
                    key={selectedContact.id} // –ö–ª—é—á –¥–ª—è —Å–±—Ä–æ—Å–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã LinkedIn..."
                    className="textarea"
                    style={{ height: '160px' }}
                    defaultValue={selectedContact.profileText || ''}
                />
                <button className="btn btn-primary" style={{ marginTop: '12px' }}>
                    –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ (–≠—Ç–∞–ø 1)
                </button>
            </div>

            <div className="card">
                <h2 className="card-title">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</h2>
                <div className="message-box">
                    <p>–ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</p>
                </div>
            </div>
            
            <div className="card">
              <h2 className="card-title">–ü–µ—Ä–µ–ø–∏—Å–∫–∞</h2>
              {/* –¢—É—Ç –±—É–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ */}
              <textarea
                placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞..."
                className="textarea"
                style={{ marginTop: '16px', height: '100px' }}
              />
              <button className="btn btn-secondary" style={{ marginTop: '12px' }}>
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
              </button>
            </div>
          </>
        ) : (
          <div className="card">
            <h2 className="card-title">–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h2>
            <p>–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.</p>
          </div>
        )}
      </main>
      <style jsx>{`
        .status-select {
            background-color: #374151;
            color: #e5e7eb;
            border: 1px solid #4b5563;
            border-radius: 6px;
            padding: 4px 8px;
            margin-right: 12px;
        }
        .delete-btn {
            background: none;
            border: none;
            color: #9ca3af;
            cursor: pointer;
            font-size: 1.2rem;
        }
        .delete-btn:hover {
            color: #ef4444;
        }
      `}</style>
    </div>
  );
}
